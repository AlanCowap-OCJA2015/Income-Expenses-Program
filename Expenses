
public class Expenses {
	
	//State
	
	private String name;
	private double amount;
	private TypeOfExpense type;
	public static double totalExpense;
	
	//Behaviour
	//standard no args constructor
	public Expenses(){
		this("No Bill", 0, TypeOfExpense.YEARLY);
	}
	
	//3 args constructor
	public Expenses(String name, double amount, TypeOfExpense type){
		this.name = name;
		this.amount = amount;
		this.type = type;
		calculateTotalExpense(amount, type);
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getAmount() {
		return amount;
	}

	public void setAmount(double amount) {
		this.amount = amount;
		calculateTotalExpense(amount);
	}

	public TypeOfExpense getType() {
		return type;
	}

	public void setType(TypeOfExpense type) {
		this.type = type;
	} 
	//private overloaded method for use in setAmount method
	private void calculateTotalExpense(double amount){
		totalExpense += this.calculateYearlyAmount(this);
	}
	//private method to  calculate all Expenses objects total amount, used for constructor
	private void calculateTotalExpense(double amount, TypeOfExpense type){
		totalExpense += this.calculateYearlyAmount(amount, type);
	}
	
	//overloaded private method for 3 args Constructor use
  private double calculateYearlyAmount(double amount, TypeOfExpense type){
		switch(type){
		case WEEKLY:
			return (amount * 52);
		case MONTHLY:
			return (amount * 12);
		case BIMONTHLY:
			return (amount * 6);
		case YEARLY:
			return amount;
		default:
			return -1;
		}
	}
	
	//method to calculate a single expenses yearly amount
	public double calculateYearlyAmount(Expenses exp){
		switch(exp.getType()){
		case WEEKLY:
			return (this.amount * 52);
		case MONTHLY:
			return (this.amount * 12);
		case BIMONTHLY:
			return (this.amount * 6);
		case YEARLY:
			return this.amount;
		default:
			return -1;
		}
	}

}
